# !/usr/bin/env python
# -- coding: utf-8 --
"""
@Filename:   Task4_anagram.py
@Date:       20.04.2024
@Time:       18:55
@Author:     Mentor
@Software:   PyCharm
"""
"""
Справка!
Анаграмма — это перестановка букв одного слова для получения нового слова.

Пример:
Кабан - банКа, мышка - камыш, с0н - н0с, 45аак - а5к4а и т.д.
"""
# Импортируем модуль для генерации входных значений
from Task4_anagram_generator import (random_string_func,
                                    anagrama_string_gen)

class AnagramaWords():
    """ Класс, проверяющий являются ли 2 слова анаграммами. """

    def __init__(self, first_word, second_word):
        """
        Функция инициализирует 2 атрибута: first_word и second_word -
        слова, которые необходимо проверить на анаграмму.
        """
        self.first_word = first_word
        self.second_word = second_word

    def anagrama_func(self):
        """
        1 метод.

        Функция, проверяющая являются ли 2 слова анаграммами.

        Входные параметры:
            1. first_word: первая последовательность символов (слово)
            2. second_word: вторая последовательность символов (слово)
        Выходное значение:
            логическое утверждение (True или False)

        Примечание: алгоритм работает правильно, но использует
        вычислительные ресурсы не рационально.
        """
        # Создаем пустой словарь для записи первого слова.
        first_dict = {}
        # Задаем в пустой словарь слово при помощи цикла for
        for char in self.first_word:
            # Словарь будет хранить количество вхождений каждого символа
            first_dict[char] = first_dict.get(char, 0) + 1

        # Создаем пустой словарь для записи второго слова.
        second_dict = {}
        # Задаем в пустой словарь слово при помощи цикла for
        for char in self.second_word:
            # Словарь будет хранить количество вхождений каждого символа
            second_dict[char] = second_dict.get(char, 0) + 1

        # Сравниваем полученные словари
        return first_dict == second_dict

    def anagrama_optimal_func(self):
        """
        2 метод.

        Оптимизированная функция, проверяющая являются ли 2 слова анаграммами.

        Входные параметры:
            1. first_word: первая последовательность символов (слово)
            2. second_word: вторая последовательность символов (слово)
        Выходное значение:
            логическое утверждение (True или False)

        Примечание: алгоритм работает более совершенно,
        потому что тратит меньше вычислительных ресурсов
        """
        # Создаем пустой словарь для записи первого слова.
        first_dict = {}
        # Задаем в пустой словарь слово при помощи цикла for
        for char in self.first_word:
            # Словарь будет хранить количество вхождений каждого символа
            first_dict[char] = first_dict.get(char, 0) + 1

        # Проходим циклом for по второму слову и
        # сравниваем его посимвольно со словарем первого слова
        for char in self.second_word:
            # Ищем вхождение символа в словарь первого слова
            if char in first_dict:
                # Если символ входит в словарь, уменьшаем кол-во вхождений на 1
                first_dict[char] -= 1
                # Если символ не входит в словарь, то удаляем этот символ
                if first_dict[char] == 0:
                    del first_dict[char]
            # Иначе символы второго слова не совпадают с символами первого слова
            else:
                return False

        # Если словарь пуст, значит слова являются анаграммами
        return not first_dict

    def anagrama_array_func(self):
        """
        3 метод.

        Функция, проверяющая являются ли 2 слова анаграммами.
        Функция основана на использовании массивов и их свойств
        для проверки на анаграмму.

        Входные параметры:
            1. first_word: первая последовательность символов (слово)
            2. second_word: вторая последовательность символов (слово)
        Выходное значение:
            логическое утверждение (True или False)

        Примечание: при работе со словарями большой длины может быть
        долгий процесс обработки входных значений. Более продвинутый способ
        обработки включает в себя работу с массивами.

        Функция ord() - встроенная функция, принимает только 1 символ
        возвращает целое число - номер из таблицы символов Unicode.
        """
        # Создаем нулевые массивы с длиной, равной количеству символов в строке
        first_count  = [0] * ord((self.first_word[0]))
        second_count = [0] * ord((self.second_word[-1]))

        # Заполняем 1 массив
        # Создаем цикл посимвольного перебора первого слова
        for char in self.first_word:
            # Вычисляем индекс, как разность номера символа char и 'a'
            # в таблице символов Unicode
            index = ord(char) - ord('a')
            # Увеличиваем на 1 элемент первого массива с индексом index
            first_count[index] += 1

        # Создаем цикл посимвольного перебора второго слова
        for char in self.second_word:
            index = ord(char) - ord('a')
            second_count[index] += 1

        # Сравниваем полученные массивы
        return first_count == second_count

# Проверка работы описанных функций на определение анаграммы 2 слов
if __name__ == '__main__':
    # Задаем случайное слово
    example_first_word = random_string_func()
    # Создаем анаграмму методом зеркалирования строки
    example_second_word = anagrama_string_gen(example_first_word)[0]

    print(f'\nПроверить, является ли слово {example_second_word} '
        f'анаграммой к слову {example_first_word}')

    # Создаем кортеж из 2 знач, как элемент класса AnagramaWords для проверки
    tuple_words = AnagramaWords(example_first_word, example_second_word)

    # 1 метод
    print('\nРезультат проверки 1 методом, anagrama_func():\n',
        AnagramaWords.anagrama_func(tuple_words))

    # 2 метод
    print('\nРезультат проверки 2 методом, anagrama_optimal_func():\n',
        AnagramaWords.anagrama_optimal_func(tuple_words))

    # 3 метод
    print('\nРезультат проверки 3 методом, anagrama_array_func():\n',
        AnagramaWords.anagrama_array_func(tuple_words))
