# !/usr/bin/env python
# -- coding: utf-8 --
"""
@Filename:   Task7_two_pointed_method.py
@Date:       30.06.2024
@Time:       15:05
@Author:     Mentor
@Software:   PyCharm
"""

"""
Справка!
Метод двух указателей является эффективным подходом для решения ряда задач 
по программированию. Он заключается в использовании двух указателей, 
которые движутся по структуре данных в разных направлениях 
или с разной скоростью.

Традиционным примером использования метода двух указателей является задача
о нахождении пары чисел в упорядоченном массиве, 
сумма которых равна заданному числу.
"""
# Импортируем библиотеку случайных чисел
import random

def random_array_func(num_elements = random.randint(5, 100)):
    """
    Функция создает произвольный массив данных.

    Для реализации метода двух указателей необходимо работать с упорядоченным
    по возрастанию списком.

    Входной параметр:
        num_elements: целочисленное значение (int).
        Число элементов в произвольном массиве. По умолчанию - случайное число.

    Выходное значение:
        random_array: произвольный массив целочисленных значений,
        отсортированный по возрастанию
    """
    # Задаем пустой массив, в который будем добавлять значения,
    # созданные случайным образом
    random_array = []

    # Задаем цикл перебора значений от 0 до заданного числа элементов
    for _ in range(0, num_elements):
        # Добавялем в массив случайное число
        random_array.append(random.randint(2, 29))

    # Сортируем массив по возрастанию
    random_array.sort()

    # Результат работы функции - произвольный массив
    return random_array

def two_pointed_method(data_list = random_array_func(),
                       target_num = random.randint(0, 50)):
    """
    Функция позволяет найти в упорядоченной структуре данных заданное число
    при помощи метода двух указателей.

    Входные параметры:
        1. data_list: список данных (integer), упорядоченный по возрастанию.
        По умолчанию задан, как произвольный массив
        2. target_num: произвольное целое число (integer)

    Выходное значение:
        first_index_element, last_index_element: пара индексов соответствующих
        чисел в массиве, сумма которых образует искомое число
    """

    # Задаем первый и последний элементы массива данных.
    # Первый элемент с индексом first = 0
    first_index_element = 0

    # Последний элемент с индексом last = длина массива - 1
    last_index_element = len(data_list) - 1

    # Цикл перебора всех элементов массива от первого до последнего
    while first_index_element < last_index_element:
        # Задаем сумму элементов массива с индексами,
        # равными начальному и конечному значению
        elements_sum = data_list[first_index_element] + data_list[last_index_element]

        # Если сумма элементов равна искомому числу, то выводим эту сумму
        if elements_sum == target_num:
            return [first_index_element + 1, last_index_element + 1]

        # Иначе продолжаем искать сумму 2 элементов в массиве
        elif elements_sum < target_num:
            # Увеличиваем первый индекс на 1
            first_index_element += 1
        else:
            # Уменьшаем последний индекс на 1
            last_index_element -= 1


if __name__ == '__main__':
    print('Количество элементов массива:', random_array_func.__defaults__[0])
    print('Случайным образом заданный массив:\n', random_array_func())
    #
    print('\nСлучайно заданное число:', two_pointed_method.__defaults__[1])

    if two_pointed_method():
        print('\nЭлементы с индексами из массива,'
            ' сумма которых дает искомое число:\n', two_pointed_method())
    else:
        print('В заданном массиве ни одна пара чисел не образует искомое число')
