# !/usr/bin/env python
# -- coding: utf-8 --
"""
@Filename:   Task_2_rle_compression.py
@Date:       06.04.2024
@Time:       20:05
@Author:     Mentor
@Software:   PyCharm
"""

"""
Справка!
Кодирование длин серий (англ. run-length encoding, RLE) или 
кодирование повторов — алгоритм сжатия данных, заменяющий повторяющиеся символы
(серии) на один символ и число его повторов. Серией называется 
последовательность, состоящая из нескольких одинаковых символов. 
При кодировании (упаковке, сжатии) строка одинаковых символов, составляющих 
серию, заменяется строкой, содержащей сам повторяющийся символ и количество 
его повторов. 

Задача:
Необходимо реализовать функцию, принимающую в аргументах строку, 
состоящую из букв и вернуть новую строку, в которой повторяющиеся буквы 
заменены количеством повторений.

Пример:
ABCABCABCDDDFFFFFF --> 1A1B1C1A1B1C1A1B1C3D6F
"""


def encode_message(message):
    """
    Функция реализует сжатие входной последовательности символов (строки)
    по алгоритму RLE. Повторяющиеся буквы в строке будут заменены
    количеством повторений.

    Входной параметр:
        message: последовательность символов (строка).

    Выходное значение:
        encoded_string: строка, преобразованная по правилу
        'количество вхождений' + 'символ из строки'
    """
    # Объявляем начальные значения функции.
    # Задаем строку (выходное значение) = 0. Потом будем добавлять в перемен.
    encoded_string = ''
    # Переменная-счетчик. Нужна для перебора символов в строке. По умолчанию = 0
    i = 0

    # Цикл 1. Делаем перебор от первого до последнего символа в строке
    while (i <= len(message) - 1):
        # Если символ встречается в строке, то присваиваем count = 1 (вхождение)
        count = 1
        # char - символ в строке с номером i
        char = message[i]
        # Вторая переменная-счетчик.
        # Нужна для отслеживания количества подряд идущих одинаковых символов
        j = i

        # Вложенный цикл 2. Перебор от текущего номера символа до конца строки
        while (j < len(message) - 1):
            # Если текущий элемент строки равен последующему, то
            if (message[j] == message[j + 1]):
                # Увеличиваем вхождение текущего символа на 1
                count += 1
                # Переходим к обработке последующего символа, пока идет повтор
                j += 1
            # Иначе прерываем работу вложенного цикла. Переходим к след. символ
            else:
                break

        # К выходному значению кодированной строки добавляем
        # количество вхождений и символ из строки
        encoded_string += str(count) + char
        i = j + 1

    # Возвращаем кодированную по заданному алгоритму строку
    return encoded_string


# Если выполняем функцию кодирования строки методом RLE внутри этого модуля:
if __name__ == '__main__':
    # Задаем пример исходной строки
    example_string = 'ABCABCABCDDDFFFFFF'
    print('Исходная строка:', example_string)
    # Реализуем пример выполнения алгоритма
    example_encode_message = encode_message(example_string)

    print(f'Результат выполнения кодирования строки: {example_encode_message}')
