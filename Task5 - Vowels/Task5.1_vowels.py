# !/usr/bin/env python
# -- coding: utf-8 --
"""
@Filename:   Task5_vowels.py
@Date:       29.04.2024
@Time:       16:13
@Author:     Mentor
@Software:   PyCharm
"""
# Добавляем генератор случайных строк
from Task5_vowels_generator import random_string_func

class VowelsClass():
    """ Класс для подсчета гласных букв в заданной строке (слове)"""

    def __init__(self,
                message = random_string_func(),
                vowels = 'aeiouyAEIOUYаиеёоуыэюяАИЕЁОУЫЭЮЯ'):
        """
        Метод для инициализации входного значения - заданной строки,
        в которой необходимо подсчитать количество гласных букв.

        Переменные:
            1. message - последовательность символов (слово).
            По умолчанию, если не задана последовательность,
            message = 'Приветик, разработчик!'

            2. vowels - последовательность (строка) гласных букв

            По умолчанию, если не задана последовательность, переменная
            содержит в себе все гласные буквы кириллического и латинского
            алфавита в верхнем и нижнем регистре.
            vowels = 'aeiouyAEIOUYаиеёоуыэюяАИЕЁОУЫЭЮЯ'
        """
        self.message = message
        self.vowels = vowels

    def vowels_func(self):
        """
        1 метод.

        Функция подсчитывает количество гласных в заданной строке (слове).
        В данном методе используем посимвольный перебор входной строки (слова).

        Входной параметр:
            1. message: последовательность символов (слово)
            2. vowels: последовательность символов,
            среди которых будет произведен поиск

        Выходное значение:
            количество гласных в строке (слове) - целочисленное значение
        """

        # Задаем переменную, в которую будем записывать вхождение гласных букв
        count = 0

        # Задаем цикл, в котором посимвольно перебираем заданное слово
        for char in self.message:
            # Если текущий символ входит в перечень гласных букв
            if char in self.vowels:
                # Увеличиваем количество вхождений на 1
                count += 1

        # Результат функции - количество вхождений гласных букв
        return count

    def vowels_count_func(self):
        """
        2 метод.

        Функция подсчитывает количество гласных в заданной строке (слове).
        В данном случае используем сумму вхождений гласных - метод count().

        Входной параметр:
            1. message: последовательность символов (слово)
            2. vowels: последовательность символов,
            среди которых будет произведен поиск
        Выходное значение:
            количество гласных в строке (слове) - целочисленное значение
        """

        # Преобразуем строку к нижнему регистру, чтобы учитывать все гласные
        # как в ВЕРХНЕМ, так и в нижнем регистрах
        message = self.message.lower()

        # Переприсваиваем набор гласных только гласные нижнего регистра
        vowels = 'aeiouyаиеёоуыэюя'

        # Используем цикл для перебора гласных. sum считает вхождения
        count = sum(message.count(vowel) for vowel in vowels)

        # Результат функции - количество вхождений гласных букв
        return count

    def vowels_re_func(self):
        """
        3 метод.

        Функция подсчитывает количество гласных в заданной строке (слове).
        В данном случае используем регулярные выражения.

        Входной параметр:
            1. message: последовательность символов (слово)
            2. vowels: последовательность символов,
            среди которых будет произведен поиск
        Выходное значение:
            количество гласных в строке (слове) - целочисленное значение
        """
        # Импортируем библиотеку для работы с регулярными выражениями
        import re

        # Преобразуем гласные из вида аеё к виду [аеё]. Так надо для поиска :)
        vowels = f'[{str(self.vowels)}]'

        # При помощи регулярного выражения считаем количество вхождений
        # гласных букв в сообщении
        count = len(re.findall(vowels, self.message))

        # Результат функции - количество вхождений гласных букв
        return count

    def vowels_gen_func(self):
        """
        4 метод.

        Функция подсчитывает количество гласных в заданной строке (слове).
        В данном случае используем генератор списков.

        Входной параметр:
            1. message: последовательность символов (слово)
            2. vowels: последовательность символов,
            среди которых будет произведен поиск
        Выходное значение:
            количество гласных в строке (слове) - целочисленное значение
        """
        # Задаем генератор списка
        vowels = [char for char in self.message if char in self.vowels]

        # Считаем количество вхождений
        count = len(vowels)

        # Результат функции - количество вхождений гласных букв
        return count

if __name__ == '__main__':
    # Блок работы программы с пользовательскими данными
    try:
        my_word  = (input('\nВведите слово, в котором будет'
                            '\nреализован поиск количества гласных букв:\n\t'))

        # Задаем пример слова, в котором будем реализовывать подсчет гласных,
        # как элемент класса VowelsClass
        my_message = VowelsClass(my_word)

        # Проверка 4 описанными методами:
        if  VowelsClass.vowels_func(my_message) == \
            VowelsClass.vowels_re_func(my_message) == \
            VowelsClass.vowels_count_func(my_message) == \
            VowelsClass.vowels_gen_func(my_message):
            # Результат будет только когда все 4 метода адекватно работают
            # Запуск функции с пользовательскими данными
            print('Результат:\n\t', VowelsClass.vowels_func(my_message))

    # В случае ошибки ввода или отсутствия данных программа будет работать
    # с произвольными значениями, заданными по умолчанию для функции
    except ValueError:
        print('\nВведенные пользовательские данные не позволяют '
            'адекватно работать алгоритму программы.\n'
            'Пример работы функции с произвольными значениями:\n')

        # Задаем слово случайным образом
        example_word = random_string_func()
        print('Случайно сгенерированное слово:\n', example_word)

        # Задаем пример слова, в котором будем реализовывать подсчет гласных,
        # как элемент класса VowelsClass
        example_message = VowelsClass(example_word)

        # Проверка 4 описанными методами:
        if VowelsClass.vowels_func(example_message) == \
                VowelsClass.vowels_re_func(example_message) == \
                VowelsClass.vowels_count_func(example_message) == \
                VowelsClass.vowels_gen_func(example_message):
            # Результат будет только когда все 4 метода адекватно работают
            # Запуск функции с пользовательскими данными
            print('Результат:\n\t', VowelsClass.vowels_func(example_message))

