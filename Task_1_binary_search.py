# !/usr/bin/env python
# -- coding: utf-8 --
"""
@Filename:   Task_1_binary_search.py
@Date:       06.04.2024
@Time:       14:05
@Author:     Mentor
@Software:   PyCharm
"""

"""
Справка!
Бинарный поиск — это алгоритм, используемый для поиска элемента 
в отсортированном массиве путем многократного деления интервала поиска пополам.
"""


def binary_search(data_list, desire_value):
    """
    Функция, реализующая бинарный поиск в упорядоченном по возрастанию массиве
    целочисленных значений.

    По умолчанию входной список (массив данных) считаем упорядоченным
    по возрастанию, то есть data_list[0] <= data_list[1] <= data_list[N]

    Входные параметры:
        1. data_list: список данных (integer), упорядоченный по возрастанию
        2. desire_value: заданное значение. По умолчанию считаем,
        что оно встречается в массиве данных
    Выходное значение:
        index: номер элемента, значение которого совпадает с заданным значением
    """
    # Задаем первый и последний элементы массива данных.
    # Первый элемент с индексом first = 0
    first_index_element = 0

    # Последний элемент с индексом last = длина массива - 1
    last_index_element = len(data_list) - 1

    # Задаем начальное значение искомого индекса. В последствии будет меняться
    # Значение -1 - это переменная-флаг. Начальное значение может быть любым.
    index = - 1

    # Цикл перебора всех элементов массива от первого до последнего
    while ((first_index_element <= last_index_element) and (index == -1)):
        # Задаем индекс среднего элемента массива, как среднее арифметич.
        mid_index_element = (first_index_element + last_index_element) // 2
        # Если значение элемента с заданным индексом равняется искомому знач.
        # то определяем искомый индекс, как заданный средний элемент массива
        if data_list[mid_index_element] == desire_value:
            index = mid_index_element
        # Иначе делаем перебор значений массива
        else:
            # Если искомое значение меньше среднего элемента массива,
            # то переприсваиваем последний элемент = средний элемент массива -1
            # (отбрасываем все значения больше среднего (справа))
            if desire_value < data_list[mid_index_element]:
                last_index_element = mid_index_element - 1
            # Иначе переприсваиваем первый элемент = средний элемент массива -1
            # (отбрасываем все значения меньше среднего (слева))
            else:
                first_index_element = mid_index_element + 1

    # После выполнения цикла получаем индекс элемента массива с заданным знач.
    if index != -1:
        return index
    # Если index == -1 (невозможное начальное значение) - элемент не найден
    else:
        print('В заданном массиве не найден элемент с искомым значением.')


if __name__ == '__main__':
    # Пример списка для выполнения функции бинарного поиска
    example_list = [12, 13, 15, 19, 20, 22, 25, 26, 28, 33, 34, 38, 39, 40,
                    43, 45, 67, 71, 83, 84, 85, 89, 91, 103, 129, 139, 141,
                    189, 190, 199, 290, 291, 293, 789, 795, 797, 799, 947,
                    969, 960, 1005, 1009, 2005, 2007, 6091, 20034, 70067]

    # Пример значения для выполнения функции бинарного поиска (входит в список)
    example_value = 795

    example_binary_search = binary_search(example_list, example_value)

    if ((example_binary_search != -1) and (example_binary_search != None)):
        print(
            f'Элемент списка с индексом {example_binary_search} '
            f'соответствует заданному значению {example_value}')
